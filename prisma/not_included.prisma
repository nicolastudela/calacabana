

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  GUEST
  ADMIN
}

model User {
  id        String       @id @db.Uuid
  email     String       @unique @db.VarChar(255)
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamptz
  name      String?
  lastName  String?      @map("last_name")
  phone     String?
  address   String?
  profiles  UserPofile[]
}

model UserPofile {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  role          Role      @default(GUEST)
  ownedBookings Booking[] @relation(name: "ownedBookings")
  bookings      Booking[] @relation(name: "bookings")
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  WAITING_FOR_USER
  WAITING_FOR_HOST
  DRAFT
}

model Booking {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now()) @map("created_at")
  createdBy   UserPofile  @relation(name: "ownedBookings", fields: [createdById], references: [id])
  createdById Int         @map("created_by_id")
  updatedAt   DateTime    @updatedAt @map("updated_at") @db.Timestamptz
  startDate   DateTime    @map("start_date") @db.Date
  endDate     DateTime    @map("end_date") @db.Date
  guestUser   UserPofile? @relation(name: "bookings", fields: [guestUserId], references: [id])
  guestUserId Int         @map("guest_user_id")
}